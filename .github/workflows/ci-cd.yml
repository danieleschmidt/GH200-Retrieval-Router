name: GH200 Retrieval Router CI/CD

on:
  push:
    branches: [ main, develop, 'feature/*', 'terragon/*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: nvcr.io
  IMAGE_NAME: terragon/gh200-retrieval-router
  NODE_VERSION: '18'

jobs:
  # Security and Code Quality
  security-scan:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Security audit
      run: npm audit --audit-level high
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Build and Test
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        node-version: ['18', '20']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Run unit tests
      run: npm test
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
    
    - name: Performance benchmarks
      run: |
        npm start &
        sleep 30
        npm run benchmark || true
        pkill -f "node src/index.js" || true

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to NVIDIA Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.NVCR_USERNAME }}
        password: ${{ secrets.NVCR_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          GIT_COMMIT=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}

  # Kubernetes Deployment (Development)
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}
    
    - name: Deploy to development
      run: |
        kubectl apply -k k8s/overlays/development
        kubectl rollout status statefulset/gh200-retrieval-router -n gh200-dev
    
    - name: Run smoke tests
      run: |
        kubectl port-forward svc/gh200-retrieval-router 8080:8080 -n gh200-dev &
        sleep 30
        curl -f http://localhost:8080/health
        pkill -f "kubectl port-forward" || true

  # Kubernetes Deployment (Staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
    
    - name: Deploy to staging
      run: |
        kubectl apply -k k8s/overlays/staging
        kubectl rollout status statefulset/gh200-retrieval-router -n gh200-staging
    
    - name: Run full test suite
      run: |
        kubectl port-forward svc/gh200-retrieval-router 8080:8080 -n gh200-staging &
        sleep 60
        npm run test:e2e
        pkill -f "kubectl port-forward" || true

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}
    
    - name: Pre-deployment checks
      run: |
        # Verify staging health
        echo "Performing pre-deployment validation..."
        kubectl get pods -n gh200-staging
        
        # Check resource availability
        kubectl describe nodes -l nvidia.com/gpu.product=NVIDIA-GH200-480GB
    
    - name: Deploy to production (Blue-Green)
      run: |
        # Deploy to green environment first
        kubectl apply -k k8s/overlays/production-green
        kubectl rollout status statefulset/gh200-retrieval-router-green -n gh200-prod
        
        # Health check green environment
        kubectl port-forward svc/gh200-retrieval-router-green 8080:8080 -n gh200-prod &
        sleep 60
        curl -f http://localhost:8080/health
        pkill -f "kubectl port-forward" || true
        
        # Switch traffic to green
        kubectl patch service gh200-retrieval-router -n gh200-prod -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Wait and then remove blue
        sleep 300
        kubectl delete statefulset gh200-retrieval-router-blue -n gh200-prod --ignore-not-found=true
    
    - name: Post-deployment verification
      run: |
        echo "Verifying production deployment..."
        kubectl get pods -n gh200-prod
        kubectl top pods -n gh200-prod
        
        # Performance validation
        kubectl port-forward svc/gh200-retrieval-router 8080:8080 -n gh200-prod &
        sleep 30
        npm run benchmark:production
        pkill -f "kubectl port-forward" || true

  # Security Scan for Container
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Helm Chart Testing
  helm-test:
    name: Helm Chart Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Lint Helm charts
      run: |
        helm lint helm/gh200-retrieval-router
    
    - name: Template and validate
      run: |
        helm template helm/gh200-retrieval-router --values helm/gh200-retrieval-router/values-prod.yaml > /tmp/manifests.yaml
        # Additional validation could be added here

  # Performance Monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}
    
    - name: Long-term performance validation
      run: |
        echo "Starting 30-minute performance monitoring..."
        kubectl port-forward svc/gh200-retrieval-router 8080:8080 -n gh200-prod &
        
        # Run extended benchmarks
        for i in {1..6}; do
          echo "Performance test iteration $i/6"
          sleep 300  # 5 minutes between tests
          npm run benchmark:extended || echo "Benchmark $i failed"
        done
        
        pkill -f "kubectl port-forward" || true
        echo "Performance monitoring completed"

  # Cleanup
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [performance-monitoring, container-security]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleanup job would remove old container images"
        # In practice, this would clean up old images from registry
        # docker image prune, etc.
    
    - name: Notify completion
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#gh200-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
