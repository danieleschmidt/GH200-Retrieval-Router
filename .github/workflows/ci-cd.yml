# GitHub Actions CI/CD Pipeline for GH200 Retrieval Router
name: GH200 Retrieval Router CI/CD

on:
  push:
    branches: [main, develop, 'release/*']
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: nvcr.io
  IMAGE_NAME: terragon/gh200-retrieval-router
  CLUSTER_NAME: gh200-retrieval-router
  AWS_REGION: us-west-2

jobs:
  # Security scanning and validation
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.force_deploy != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better security scanning

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Secrets detection with Gitleaks
      uses: zricethezav/gitleaks-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: SAST with Semgrep
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'semgrep.sarif'
      continue-on-error: true
      env:
        SEMGREP_RULES: >-
          p/security-audit
          p/secrets
          p/nodejs
          p/docker

  # Code quality and testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security
    if: always() && (needs.security.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --only=production
        npm install --only=dev

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npx tsc --noEmit
      continue-on-error: true

    - name: Run unit tests
      run: npm run test:coverage
      env:
        NODE_ENV: test

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        REDIS_URL: redis://localhost:6379

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        fail_ci_if_error: false

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          test-results/

  # Build and publish Docker image
  build:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: [security, test]
    if: always() && (needs.test.result == 'success' || github.event.inputs.force_deploy == 'true')
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to NVCR Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.NVCR_USERNAME }}
        password: ${{ secrets.NVCR_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          NODE_ENV=production

    - name: Set image output
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

    - name: Image vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image.outputs.image }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging-api.gh200.terragon-labs.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }}-staging --region ${{ env.AWS_REGION }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.2'

    - name: Deploy to staging with Helm
      run: |
        helm upgrade --install gh200-staging ./helm/gh200-retrieval-router \
          --namespace gh200-system \
          --create-namespace \
          --set image.tag=${{ needs.build.outputs.digest }} \
          --set environment=staging \
          --set ingress.hosts[0].host=staging-api.gh200.terragon-labs.com \
          --set resources.requests.memory=200Gi \
          --set resources.limits.memory=400Gi \
          --set autoscaling.minReplicas=2 \
          --set autoscaling.maxReplicas=8 \
          --wait --timeout=10m

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=gh200-retrieval-router -n gh200-system --timeout=300s
        ./scripts/smoke-tests.sh staging-api.gh200.terragon-labs.com

    - name: Run performance tests
      run: |
        npm run test:performance -- --target=https://staging-api.gh200.terragon-labs.com
      continue-on-error: true

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://api.gh200.terragon-labs.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }}-prod --region ${{ env.AWS_REGION }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.2'

    - name: Backup current deployment
      run: |
        helm get values gh200-production -n gh200-system > backup-values.yaml
        kubectl get statefulset gh200-retrieval-router -n gh200-system -o yaml > backup-statefulset.yaml

    - name: Blue-Green Deployment
      run: |
        # Deploy to green environment
        helm upgrade --install gh200-production-green ./helm/gh200-retrieval-router \
          --namespace gh200-system \
          --set image.tag=${{ needs.build.outputs.digest }} \
          --set environment=production \
          --set nameOverride=gh200-retrieval-router-green \
          --set ingress.hosts[0].host=green.api.gh200.terragon-labs.com \
          --set resources.requests.memory=200Gi \
          --set resources.limits.memory=400Gi \
          --set autoscaling.minReplicas=4 \
          --set autoscaling.maxReplicas=32 \
          --wait --timeout=15m

    - name: Health check green deployment
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=gh200-retrieval-router-green -n gh200-system --timeout=600s
        ./scripts/health-check.sh green.api.gh200.terragon-labs.com

    - name: Run production smoke tests
      run: |
        ./scripts/smoke-tests.sh green.api.gh200.terragon-labs.com
        ./scripts/load-test.sh green.api.gh200.terragon-labs.com

    - name: Switch traffic to green
      run: |
        # Update main ingress to point to green service
        kubectl patch ingress gh200-ingress -n gh200-system -p '{"spec":{"rules":[{"host":"api.gh200.terragon-labs.com","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"gh200-retrieval-router-green","port":{"number":8080}}}}]}}]}}'
        
        # Wait for traffic to switch
        sleep 30

    - name: Verify production deployment
      run: |
        ./scripts/health-check.sh api.gh200.terragon-labs.com
        ./scripts/performance-validation.sh api.gh200.terragon-labs.com

    - name: Cleanup old blue deployment
      run: |
        # Remove old blue deployment after successful green deployment
        helm uninstall gh200-production -n gh200-system || true
        
        # Rename green to production
        helm upgrade --install gh200-production ./helm/gh200-retrieval-router \
          --namespace gh200-system \
          --set image.tag=${{ needs.build.outputs.digest }} \
          --set environment=production \
          --set ingress.hosts[0].host=api.gh200.terragon-labs.com \
          --set resources.requests.memory=200Gi \
          --set resources.limits.memory=400Gi \
          --set autoscaling.minReplicas=4 \
          --set autoscaling.maxReplicas=32 \
          --reuse-values

    - name: Cleanup green deployment
      run: |
        helm uninstall gh200-production-green -n gh200-system || true

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: production-deployment-artifacts
        path: |
          backup-values.yaml
          backup-statefulset.yaml

  # Post-deployment monitoring
  post-deploy:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Monitor deployment health
      run: |
        # Monitor for 10 minutes
        for i in {1..10}; do
          echo "Health check iteration $i/10"
          if ! ./scripts/health-check.sh api.gh200.terragon-labs.com; then
            echo "Health check failed at iteration $i"
            exit 1
          fi
          sleep 60
        done

    - name: Performance baseline validation
      run: |
        ./scripts/performance-baseline.sh api.gh200.terragon-labs.com

    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#gh200-deployments'
        text: |
          GH200 Retrieval Router deployment to production completed
          Status: ${{ job.status }}
          Image: ${{ needs.build.outputs.image }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}