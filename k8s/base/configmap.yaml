apiVersion: v1
kind: ConfigMap
metadata:
  name: gh200-config
  namespace: gh200-system
  labels:
    app.kubernetes.io/name: gh200-retrieval-router
    app.kubernetes.io/component: config
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  HOST: "0.0.0.0"
  PORT: "8080"
  ENABLE_GPU_ACCELERATION: "true"
  ENABLE_MONITORING: "true"
  PROMETHEUS_METRICS: "true"
  JAEGER_TRACING: "true"
  ENABLE_DASHBOARD_WS: "true"
  DASHBOARD_WS_PORT: "8081"
  GRACE_MEMORY_SIZE: "480"
  TARGET_QPS: "125000"
  TARGET_RAG_QPS: "450"
  GPU_COUNT: "4"
  MAX_BATCH_SIZE: "32768"
  STORAGE_DIR: "/app/data"
  SEGMENT_SIZE: "67108864"
  MAX_MEMORY_USAGE: "34359738368"
  MAX_CACHE_SIZE: "10737418240"
  ENABLE_PREDICTIVE_CACHE: "true"
  MAX_CLUSTERS: "10"
  FEDERATION_STRATEGY: "adaptive"
  RATE_LIMIT_MAX: "10000"
  ENABLE_THREAT_DETECTION: "true"
  GDPR_COMPLIANCE: "true"
  CCPA_COMPLIANCE: "true"
  DATA_RETENTION_DAYS: "365"
  
  # GH200 specific optimizations
  GRACE_MEMORY_POOLS: "embeddings:300,cache:100,workspace:80"
  NVLINK_RINGS: "4"
  CUDA_STREAMS: "16"
  NVLINK_ENABLED: "true"
  
  # Application configuration
  production.js: |
    module.exports = {
      server: {
        port: 8080,
        workers: 4,
        maxConnections: 10000
      },
      graceMemory: {
        totalMemoryGB: 480,
        enableZeroCopy: true,
        pools: {
          embeddings: 300 * 1024 * 1024 * 1024,
          cache: 100 * 1024 * 1024 * 1024,
          workspace: 80 * 1024 * 1024 * 1024
        }
      },
      nvlink: {
        enabled: true,
        bandwidth: 900,
        rings: 4,
        asyncTransfers: true
      },
      security: {
        enableThreatDetection: true,
        rateLimit: 10000,
        enableGDPR: true,
        enableCCPA: true
      },
      performance: {
        maxConcurrency: 5000,
        cacheSize: 107374182400,
        targetQPS: 125000,
        targetRAGQPS: 450
      },
      monitoring: {
        prometheus: true,
        jaeger: true,
        metrics: {
          collection_interval: 5000,
          retention_days: 30
        }
      }
    };
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gh200-nginx-config
  namespace: gh200-system
  labels:
    app.kubernetes.io/name: gh200-retrieval-router
    app.kubernetes.io/component: proxy
data:
  nginx.conf: |
    events {
        worker_connections 4096;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log;
        
        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
        limit_req_zone $binary_remote_addr zone=search:10m rate=1000r/s;
        
        upstream gh200_backend {
            least_conn;
            server gh200-retrieval-router-0.gh200-retrieval-router:8080 max_fails=3 fail_timeout=30s;
            server gh200-retrieval-router-1.gh200-retrieval-router:8080 max_fails=3 fail_timeout=30s;
            server gh200-retrieval-router-2.gh200-retrieval-router:8080 max_fails=3 fail_timeout=30s;
            server gh200-retrieval-router-3.gh200-retrieval-router:8080 max_fails=3 fail_timeout=30s;
        }
        
        server {
            listen 80;
            server_name _;
            
            # Health check endpoint
            location /health {
                proxy_pass http://gh200_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                access_log off;
            }
            
            # API endpoints with rate limiting
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://gh200_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_timeout 30s;
                proxy_connect_timeout 5s;
            }
            
            # Search endpoint with higher rate limits
            location /api/v1/search {
                limit_req zone=search burst=100 nodelay;
                proxy_pass http://gh200_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_timeout 60s;
                proxy_connect_timeout 10s;
            }
            
            # Default location
            location / {
                proxy_pass http://gh200_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }