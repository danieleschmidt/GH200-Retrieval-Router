apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gh200-retrieval-router
  namespace: gh200-system
  labels:
    app.kubernetes.io/name: gh200-retrieval-router
    app.kubernetes.io/component: application
    app.kubernetes.io/version: "1.0.0"
spec:
  serviceName: gh200-retrieval-router
  replicas: 4
  selector:
    matchLabels:
      app.kubernetes.io/name: gh200-retrieval-router
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gh200-retrieval-router
        app.kubernetes.io/component: application
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/api/v1/metrics"
    spec:
      # Node selection for GH200 nodes
      nodeSelector:
        nvidia.com/gpu.product: NVIDIA-GH200-480GB
        kubernetes.io/arch: arm64
      
      # Pod anti-affinity for better distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - gh200-retrieval-router
              topologyKey: kubernetes.io/hostname
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Service account
      serviceAccountName: gh200-service-account
      
      # Init container for data preparation
      initContainers:
      - name: init-data
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Initializing data directories..."
          mkdir -p /app/data/indices /app/data/cache /app/data/logs
          chown -R 1000:1000 /app/data
          echo "Data directories initialized"
        volumeMounts:
        - name: data
          mountPath: /app/data
        securityContext:
          runAsUser: 0
          runAsGroup: 0
      
      containers:
      - name: retrieval-router
        image: nvcr.io/terragon/gh200-retrieval-router:latest
        imagePullPolicy: Always
        
        # Resource allocation for GH200
        resources:
          limits:
            nvidia.com/gpu: 1
            memory: "400Gi"
            cpu: "16"
          requests:
            nvidia.com/gpu: 1
            memory: "200Gi"
            cpu: "8"
        
        # Ports
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: websocket
          containerPort: 8081
          protocol: TCP
        
        # Environment variables
        envFrom:
        - configMapRef:
            name: gh200-config
        - secretRef:
            name: gh200-secrets
        
        # Volume mounts
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /app/tmp
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe for graceful startup
        startupProbe:
          httpGet:
            path: /ping
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Graceful shutdown initiated..."
                curl -X POST http://localhost:8080/api/v1/shutdown || true
                sleep 15
      
      # Volumes
      volumes:
      - name: config
        configMap:
          name: gh200-config
      - name: logs
        emptyDir:
          sizeLimit: 10Gi
      - name: tmp
        emptyDir:
          sizeLimit: 10Gi
      
      # Termination grace period
      terminationGracePeriodSeconds: 60
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      
      # Restart policy
      restartPolicy: Always
  
  # Volume claim templates for persistent storage
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app.kubernetes.io/name: gh200-retrieval-router
        app.kubernetes.io/component: storage
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 1Ti
  
  # Update strategy
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0